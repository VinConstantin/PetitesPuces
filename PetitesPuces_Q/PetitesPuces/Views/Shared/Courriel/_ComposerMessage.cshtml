@using PetitesPuces.Securite
@model PetitesPuces.Models.PPMessage
<style>
	.btn-file {
		position: relative;
		overflow: hidden;
	}
	.btn-file input[type=file] {
		position: absolute;
		top: 0;
		right: 0;
		min-width: 100%;
		min-height: 100%;
		font-size: 100px;
		text-align: right;
		filter: alpha(opacity=0);
		opacity: 0;
		outline: none;
		background: white;
		cursor: inherit;
		display: block;
	}
	
	.t-overflow-ellipsis {
		text-overflow: ellipsis;
	}
</style>
<div>
	<div class="btn-group">
		<button type="button" onclick="envoyerMessage();" class="btn btn-info" ><span class="glyphicon glyphicon-send"></span> Envoyer</button>
	</div>
	<h2>Composer un message</h2>

	<div class="well">
		<div class="row">
            <label class="col-xs-6">
                Destinataires :
                <button type="button" onclick="loadModalDestinataire();" class="btn btn-xs btn-primary" data-toggle="modal" data-target="#modalAjoutDestinataire">
                    <span title="Ajouter des destinataires" class="glyphicon glyphicon-plus"></span>
                </button>
            </label>
            <span id="lastSave" class="col-xs-6 text-right"></span>
		</div>		
		<div class="row">
			<div class="col-xs-12" id="destinataire">
				
			</div>
		</div>
		<div class="row mt-2">
			<div class="col-xs-7">
				<label>Objet : </label>
			</div>
			<div class="col-xs-5">
				<label>Pièce jointe : </label>
			</div>
		</div>
		<div class="row">
			<div class="col-xs-7"> 
				<input id="tbObjet" value="@(Model != null ? (Model.objet ?? "") : "")" type="text" class="form-control"/>
			</div>
			<form id="fileForm" class="col-xs-5">
				<div class="input-group w-100">
                    <a id="pieceJointeLink" href="@(Model != null ? "/Courriel/PieceJointe/" + Model.NoMsg : "javascript:void(0)")">
                        <input name="fichierJoint" value="@(Model != null ? (Model.FichierJoint ?? "").ToString() : "")" id="fileUploadText" readonly class="form-control t-overflow-ellipsis"/>
                    </a>
					<span class="input-group-btn">
						<button class="btn btn-primary btn-file">
							<i class="glyphicon glyphicon-paperclip"></i>
							<input id="upload" value="" type="file"/>
						</button>
					</span>
				</div>
			</form>
		</div>
		<div class="row mt-2">
			<div class="col-xs-12">
				<label>Message :</label>
			</div>
		</div>
		<div class="row">
			<div class="col-xs-12">
                <textarea id="textarea" style="max-width: 100%" cols="300" rows="20">
                    @(Model != null ? (Model.DescMsg ?? "") : "")
                </textarea>
			</div>
		</div>
	</div>
</div>

<!-- Modal -->
<div class="modal fade" id="modalAjoutDestinataire" tabindex="-1" role="dialog" aria-labelledby="modalAjoutDestinataire" aria-hidden="true">
	<div class="modal-dialog modal-lg" role="document">
		<div id="ModalDestinatairePLACEHOLDER">

		</div>
	</div>
</div>
<script>
	/**
     *  todo : retirer des liste ne retire pas le bon item...
     */
    var lstDestinataires = [
        @if (Model != null)
        {
             foreach(var destinataire in Model.UtilisateursDestinataire)
             {
                 <text>
                     {
                         No: @destinataire.No, Nom: '@destinataire.DisplayName'
                     },
                 </text>
             }
        }
    ];

	function retirerDestinataire(id) {
		console.log(id);
		$('#Dest'+id).remove();
		
		lstDestinataires.forEach(function(temp) {
			if (temp.No ===id) {
				let index = lstDestinataires.indexOf(temp);
				lstDestinataires.splice(index, 1);
			}
		});
	}
	function afficherDestinataire(save = true) {
		$('#destinataire span').remove();
		lstDestinataires.forEach(function(temp) {
			let str = `<span style="background-color: #adadad;" class="badge badge-primary" id="Dest${temp.No}">
                            ${temp.Nom}<a onclick="retirerDestinataire(${temp.No});" style="color:red;" class="glyphicon glyphicon-remove">
                         </a></span>&nbsp;`;
			$("#destinataire").append(str);
        });
        if (save) {
            $('#destinataire').trigger('change');
        }
    }
	function retirerDestinataire(no, nom) {
		console.log(no);
		const desinataire = { No : no, Nom : nom };     
		const index = lstDestinataires.indexOf(desinataire);
		lstDestinataires.splice(index, 1);
		$('#Dest'+no).remove();
	}
    function envoyerMessage() {
        console.log(msgId);
		const url = "/Courriel/Envoyer/" + msgId;

        $.ajax({
			url: url,
			type: "POST",
			success: function(partial) {
                $('#PLACEHOLDER').html(partial);
            },
			error: function(req, status, err) {
				console.log(req, status, err);
			}
		});
		
	}
	function loadModalDestinataire() {
		$.ajax({
			url: URLPATH + "/Courriel/Destinataire",
			type: "GET",
			data: {
                
			}, 
			success: function(result) {
				/** @@type{Object<>[]} */
				lstDestinatairesTemp = lstDestinataires.slice();
                $('#ModalDestinatairePLACEHOLDER').html(result);
            },
			error: function(req, status, err) {
				console.log(req, status, err);
			}
		});
	}
</script>

<script>
	$(function() {
		/** @@type{Object<>[]} */
        afficherDestinataire(false);
		lstClients = [];
		lstVendeurs = [];
		$('textarea').froalaEditor({
			language: 'fr',
			toolbarButtons: [
				'bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'fontFamily', 'fontSize',
				'|', 'color', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL',
				'-', '|', 'quote', 'insertHR', 'undo', 'redo', 'clearFormatting', 'selectAll', 'html'
			],
			fontFamilySelection: true,
			fontSizeSelection: true,
			paragraphFormatSelection: true,
			heightMin: 250,
			quickInsertTags: [],
			toolbarButtonsXS: ['undo', 'redo', 'bold', 'italic', 'underline']
		});
	});
</script>
	