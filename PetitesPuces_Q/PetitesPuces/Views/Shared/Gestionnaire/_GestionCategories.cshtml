@using PetitesPuces.Models
@model List<Tuple<PPCategory, bool>>

<div id="lstCategories">
    <div class="row d-flex justify-content-center align-items-center" style="margin: 20px 0 10px 0">
        <h3 class="m-0 mx-1">
            Catégories
        </h3>
        <button class="btn btn-success btn-sm" data-toggle="modal" data-target="#modalAjoutCategorie">
            <i class="glyphicon glyphicon-plus"></i>
        </button>
    </div> 

    <div class="row well">
        <table class="table lst-utils table-hover">
            <tr>
                <th style="width: 5vh" scope="col">No</th>
                <th scope="col" class="text-left">Description</th>
                <th scope="col" class="text-left">Details</th>
                <td></td>
                <td></td>
            </tr>
            @foreach (var categorie in Model)
            {
            <tr class="tr-cat v-align-baseline">
                <td contenteditable="false" scope="row">@categorie.Item1.NoCategorie</td>
                <td contenteditable="false" class="text-left">@categorie.Item1.Description</td>
                <td contenteditable="false" class="text-left">@categorie.Item1.Details</td>
                @if (!categorie.Item2)
                {
                    <td>
                        <button class="btn btn-danger v-align-baseline delbtn">
                            <i class="glyphicon glyphicon-remove"></i>
                        </button>
                    </td>
                }
                else
                {
                    <td>
                        <button class="btn btn-danger v-align-baseline disabled" title="Impossible de supprimer: des produits sont associés à cette catégorie">
                            <i class="glyphicon glyphicon-remove"></i>
                        </button>
                    </td>
                }
                <td>
                    <button class="btn btn-warning v-align-baseline editbtn">
                        <i class="glyphicon glyphicon-edit"></i>
                    </button>
                </td>
            </tr>
            }
        </table>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="modalAjoutCategorie" tabindex="-1" role="dialog" aria-labelledby="modalAjoutCategorie" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <form id="contenuModal" class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Ajout de catégorie</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <div class="form-group">
                        <label for="inputEmail4">Description</label>
                        <input required id="tbCreerTitre" type="text" class="form-control center-block" placeholder="Titre">
                    </div>
                    <div class="form-group">
                        <label for="inputEmail4">Détails</label>
                        <input required id="tbCreerDetails" type="text" class="form-control center-block" id="inputEmail4" placeholder="Details">
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="center-block text-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                        <button type="submit" class="btn btn-primary">Enregistrer</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    window.onload = function () {
        let td;
        let _this;

        setupEvents();

        function setupEvents() {
            $('.delbtn').click(handleDel);
            $('#contenuModal').submit(handleAdd);
            $('.editbtn').click(handleEdit);
        }
        
        function validerTitre(titre, cell) {
            const rangees = $('.tr-cat');
            let titreUnique = true;
            
            rangees.each((_, row) => {
                if (row === cell.parent()[0]) return;
                
                if ($(row).children(null, 'td')[1].innerText === titre) {
                    titreUnique = false;
                }
            });

            return titreUnique;
        }
        
        function handleAdd(e) {
            e.preventDefault();
            const titre = $('#tbCreerTitre').val();
            const details = $('#tbCreerDetails').val();
            
            let titreUnique = validerTitre(titre, $(this));

            if (titreUnique) {
                $.post('/Gestionnaire/Categories',
                       { NoCategorie: null, Description: titre, Details: details },
                       majCategories);
                $('#modalAjoutCategorie').modal('toggle');
            } else if (titre.trim() === '' && details.trim() === '') {
                alert('Le titre et les détails ne peuvent pas demeurer vide');
            } else {
                alert('Le titre de la catégorie doit être unique');
            }

            return false;
        }

        function handleDel() {
            td = $(this).parents('tr').find('td');

            $.ajax({
                url: `/Gestionnaire/Categories/${td[0].textContent}`,
                type: 'DELETE',
                success: majCategories,
            });
        }

        function handleEdit () {
            _this = $(this);
            td = _this.parents('tr').find('td');

            if (_this.html().trim() === '<i class="glyphicon glyphicon-edit"></i>') {
                onModifyStart(td);
            } else {
                onModifyEnd(td);
            }
        }

        function onModifyStart(td) {
            _this.html('<i class="glyphicon glyphicon-floppy-disk"></i>');

            $.each(td, (index, cell) => setEditable(index, cell, true));
        }

        function onModifyEnd(index) {
            const id = td[0].textContent;
            const description = td[1].textContent;
            const details = td[2].textContent;
            
            if (!validerTitre(description, td)) {
                alert('La description de la catégorie doit être unique');
                return;
            } else if (description.trim() === '' || details.trim() === '') {
                alert('La description et les détails ne peuvent pas demeurer vide');
                return;
            }
            
            _this.html('<i class="glyphicon glyphicon-edit"></i>');
            
            $.each(td, (index, cell) => setEditable(index, cell, false));
           
            const categorie = {
                NoCategorie: id,
                Description: description,
                Details: details,
            }
            const jsonData = JSON.stringify(categorie);

            $.ajax({
                url: '/Gestionnaire/Categories',
                method: 'PUT',
                contentType: "application/json",
                data: jsonData,
                processData: false,
                success: majCategories
            });
        }

        function majCategories() {
            $.get("/Gestionnaire/Categories", null, afficherCategories);
        }

        function afficherCategories(vuePartielle) {
            $('#lstCategories').html(vuePartielle);
            setupEvents();
        }

        function setEditable(index, cell, isEditable) {
            if (index !== 0) {
                $(cell).prop('contenteditable', isEditable);
            }

            td.css('background-color', isEditable ? 'rgba(241, 166, 166, 0.1) ' : '');
        }
    };
</script>