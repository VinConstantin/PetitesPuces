@using PetitesPuces.Models
@model CatalogueViewModel

@{
    Layout = null;
}


<div class="row">

    <div class="col-md-2" style="border-right: 1px solid #333; ">
        <div style="">
            <div class="item">
                <div class="panel-footer"><h4>Recherche :</h4></div>
                <div class="panel-body">
                    <input class="form-control" value="@ViewBag.Filtre" style="width: 100%" type="text" id="tbRecherche" onchange="filtrerListe()">

                    <div class="row">&nbsp;&nbsp;&nbsp;Par:
                        Nom <input type="checkbox" name="Nom"/>
                        Description <input type="checkbox"/>
                    </div>
                </div>
                    
                <div class="panel-footer"><h4>Tri :</h4></div>
                <div class="panel-body">
                    <select id="Tri" class="form-control" onchange="updateTri()">
                        @foreach (Enum tri in  Enum.GetValues(typeof(Tri)))
                        {
                            <option value="@tri">@tri</option>
                        }
                    </select>

                    <p>Nombre d'items par page : </p>
                    <div class="nbItems">
                        <select id="ddlNbItems" onchange="updateNbItems()">
                            @for (int i = 4; i <= 40; i += 4)
                            {
                                if (@ViewBag.NbItems == i)
                                {
                                    <option selected value="@i">@i</option>
                                }
                                else
                                {
                                    <option value="@i">@i</option>
                                }
                            }
                            @if (@ViewBag.NbItems == -1)
                            {
                                <option selected value="-1">Tous</option>
                            }
                            else
                            {
                                <option value="-1">Tous</option>
                            }
                        </select>
                    </div>
                </div>
                    
                <div class="panel-footer">
                    <h4>Catégories :</h4>
                </div>
                <div class="panel-body" style="height: 40vh; overflow: auto;">
                    <p><a class="categorie" onclick="selectCategorie(@Model.Vendeur.NoVendeur,-1)" id="-1">Tous (@Model.Vendeur.PPProduits.Count)</a></p>   
                    @foreach (PPCategory category in @Model.Categories)
                    {
                        var nb = Model.Vendeur.PPProduits.Count(c => c.PPCategory == category);
                        if (nb > 0)
                        {
                            <p><a class="categorie" onclick="selectCategorie(@Model.Vendeur.NoVendeur,this)" id="@category.NoCategorie">@category.Description (@nb)</a></p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-10">
        <div class="container row">
            @if (@Model.Categorie == null)
            {
                <h3>Tous les produits</h3>
            }
            else
            {
                <h3>@Model.Categorie.Description</h3>
            }
            @foreach (PPProduit produit in Model.Produits)
            {
                @Html.Partial("Client/_Produits", produit)
            }
        </div>
        @if (ViewBag.NbPage > 1)
        {
            <div class="text-center">
                <ul class="pagination">
                    <li class="page-item"><a onclick="previousPage()" class="page-link">&laquo</a></li>
                    @for (int i = 1; i <= ViewBag.NbPage; i++)
                    {
                        string cssClass = i.Equals(ViewBag.NoPage) ? "page-item active" : "page-item";
                        <li class="@cssClass"><a id="@i" class="page-link" onclick="changePage(this)">@i</a></li>
                    }
                    <li class="page-item"><a onclick="nextPage()" class="page-link">&raquo</a></li>
                </ul>
            </div>
        }
    </div>
</div>
<script>
    window.addEventListener("load",function(){
        $('#Vendeur'+@Model.Vendeur.NoVendeur).first().addClass("Current");
        $("div.nbItems select").val("@ViewBag.NbItems");
    },false);
    //gerer la recherche
    function filtrerListe(elem) {
        console.log("recherche")
        var value = $('#tbRecherche').val();
        var NoVendeur=@Model.Vendeur.NoVendeur;
        var NoCategorie = @ViewBag.NoCategorie;
        var NbItems = @ViewBag.NbItems;
        var NoPage = 1;
        updateListeProduits(NoVendeur, NoCategorie,NbItems,NoPage, value);
    }
    //gerer le changement de Tri
    function updateTri() {
        
    }
    //gérer les clicks de categories
     
    function selectCategorie(noVendeur,elem) {
        var id = $(elem).attr("id");
        updateListeProduits(noVendeur, id);
    }
    //gerer le changement de page avec le pager
    function changePage(elem) {
        var id = $(elem).attr("id");
        var NoVendeur=@Model.Vendeur.NoVendeur;
        var NoCategorie = @ViewBag.NoCategorie;
        updateListeProduits(NoVendeur, NoCategorie,@ViewBag.NbItems,id);
    }
    function previousPage() {
        var NoVendeur=@Model.Vendeur.NoVendeur;
        var NoCategorie = @ViewBag.NoCategorie;
        updateListeProduits(NoVendeur, NoCategorie,@ViewBag.NbItems,@ViewBag.NoPage === 1?1:@ViewBag.NoPage-1);
    }
    function nextPage() {
        var NoVendeur=@Model.Vendeur.NoVendeur;
        var NoCategorie = @ViewBag.NoCategorie;
        updateListeProduits(NoVendeur, NoCategorie,@ViewBag.NbItems,@ViewBag.NoPage === @ViewBag.NbPage?@ViewBag.NoPage:@ViewBag.NoPage+1);
    }
    //gerer le chamgement de nb d'items par page
    function updateNbItems() {
        var elem = document.getElementById("ddlNbItems");
        var nb = elem.options[elem.selectedIndex].value;
        
        var NoVendeur=@Model.Vendeur.NoVendeur;
        var NoCategorie = @ViewBag.NoCategorie;
        console.log(NoCategorie)
        var NoPage = 1;

        updateListeProduits(NoVendeur,NoCategorie,nb,NoPage);
    }
    /**
     * Update les produits selon le vendeur selectionner
     */
    function updateListeProduits(NoVendeur, NoCategorie, nbItems=@ViewBag.NbItems, noPage=1, filtre = "") {
        $.ajax({
            url: URLPATH+"/Client/ListeProduits",
            type: "get",
            data: { 
                "Vendeur": NoVendeur,
                "Categorie": NoCategorie,
                "Page":noPage,
                "Size":nbItems,
                "Filtre":filtre
            },
            success: function (result) {
                $("#partialListeProduits").html(result);
            },
            error: function (req, status, err) {
                $("#partialListeProduits").html("@Html.Partial("_ErrorAlert")");
            }
        });
        $('.Current').removeClass("Current");
        $("#Vendeur"+NoVendeur).first().addClass("Current");
        
        /**
         * changer le url sans refresh
         */
        var PARAMS = "";
        PARAMS += NoVendeur ? "?Vendeur="+NoVendeur : "";
        PARAMS += NoCategorie !== 1 ? "&Categorie="+NoCategorie : "";
        PARAMS += noPage ? "&Page="+noPage : "";
        PARAMS += nbItems ? "&Size="+nbItems : "";
        PARAMS += filtre ? "&Filtre="+filtre : "";
        var objParams = {
            Vendeur:NoVendeur,
            Categorie:NoCategorie,
            Page:noPage,
            Size:nbItems,
            Filtre:filtre
        }
        history.pushState(objParams, "", PARAMS);
    }
    //remplir le div template pour le modal de visualiser un produit
    function visualiser(noProduit) {
        $.ajax({
            url: URLPATH+"/Client/InformationProduit",
            type: "get",
            data: { 
                "NoProduit": noProduit
            },
            success: function (result) {
                $("#PLACEHOLDERModalDescription").html(result);
            },
            error: function (req, status, err) {
                $("#PLACEHOLDERModalDescription").html("@Html.Partial("_ErrorAlert")");
            }
        });
    }
    //ajouter un item au produit
    function ajouterAuPanier(noProduit, quantite = 1) {
        /*
        $.ajax({
            url: URLPATH + "/Client/AjouterProduitAuPanier",
            type: "post",
            data: {
                "NoProduit": noProduit,
                "Quantite": quantite
            },
            success: function(result) {
                console.log(result)
            },
            error: function(req, status, err) {
                console.log(req, status, err)
            }
        });
        */
        console.log(quantite)
    }
    //augmeneter la quantite
    function plusQuantite(id) {
        $("#" + id).val(parseInt($("#" + id).val()) + 1);
    }
    //diminuer la quantite
    function moinsQuantite(id) {
        if ($("#" + id).val() >= 1)
            $("#" + id).val(parseInt($("#" + id).val()) - 1);
    }
</script>