@using PetitesPuces.Controllers
@model Tuple<EtatCourriel, PetitesPuces.Models.PPMessage>
@{
   ViewBag.Title = "Courriel";
}
@section styles
{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.25.0/codemirror.min.css">
 
    <!-- Include Editor style. -->
    <link href="https://cdn.jsdelivr.net/npm/froala-editor@2.9.2/css/froala_editor.pkgd.min.css" rel="stylesheet" type="text/css" />
    <link href="https://cdn.jsdelivr.net/npm/froala-editor@2.9.2/css/froala_style.min.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">

}
@section scripts
{
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/froala-editor@2.9.2/js/froala_editor.pkgd.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.25.0/codemirror.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.25.0/mode/xml/xml.min.js"></script>
    <script type="text/javascript" src="@Url.Content("/Scripts/fr.js")"></script>
}

<div class="container">
    <div class="row">
        <div class="col-sm-9 col-md-10">
            <button type="button" class="btn btn-default pull-right" data-toggle="tooltip" title="Refresh">
                &nbsp;&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh"></span>&nbsp;&nbsp;&nbsp;
            </button>
        </div>
    </div>
    <br/>
    <div class="row">
        <div class="col-sm-4 col-md-3">
            <ul class="nav nav-pills nav-stacked nav-tabs">
                <li id="Composer" data-state="Composer" href="javascript:void(0)" title="Composer un nouveau message" class="btn btn-danger text-left">
                    <i class="glyphicon glyphicon-envelope"></i> Composer
                </li>
                <hr/>
                <li id="BoiteReception" data-state="Reception" >
                    <a href="javascript:void(0)">
                        <span class="glyphicon glyphicon-inbox"></span> Boîte de réception
                    </a>
                </li>
                <li id="Brouillons" data-state="Brouillon">
                    <a href="javascript:void(0)">
                        <span class="glyphicon glyphicon-pencil"></span>Brouillons
                    </a>
                </li>
                <li id="ElementsEnvoyes" data-state="Envoye">
                    <a href="javascript:void(0)">
                        <span class="glyphicon glyphicon-send"></span> Éléments envoyés
                    </a>
                </li>
                <li id="ElementSupprimes" data-state="Supprime">
                    <a href="javascript:void(0)">
                        <span class="glyphicon glyphicon-trash"></span> Éléments supprimés
                    </a>
                </li>
            </ul>
        </div>
        <div class="col-sm-8 col-md-9" style="min-height: 60vh" id="PLACEHOLDER">
            
        </div>
    </div>
</div>
<script>
    const etats = Object.freeze({
        Composer: new Etat(loadComposerMessage),
        Reception: new Etat(loadBoiteReception),
        Brouillon: new Etat(loadBrouillons),
        Envoye: new Etat(loadElementsEnvoyes),
        Supprime: new Etat(loadElementSupprimes)
    });
    let stateName = '@Model.Item1';
    var msgId = @(Model.Item2 != null ? Model.Item2.NoMsg.ToString() : "null");
    let etat = etats[stateName];
    let selected;
    let lstDestinataires = [
        @if (Model.Item2 != null)
        {
             foreach(var destinataire in Model.Item2.UtilisateursDestinataire)
             {
                 <text>
                     {
                         No: @destinataire.No, Nom: '@destinataire.DisplayName'
                     },
                 </text>
             }
        }
    ];

    function Etat(loadFunc) {
        this.load = loadFunc;
    }

    $('[data-state]').each(function() {
        if ($(this).hasClass('active')) {
            selected = $(this);
        }

        $(this).click(function () {
            if (selected) {
                selected.removeClass('active');
            }
            $(this).addClass('active');
            stateName = $(this).attr('data-state');

            displayPageState(stateName);
        });
    });

    function displayPageState(stateName, noMsgALoad) {
        etat = etats[stateName];
        let reqUrl = `/Courriel/Boite/${stateName}`;
        if (noMsgALoad) {
            reqUrl += '/' + noMsgALoad;
        }

        history.pushState({ state: stateName, id: noMsgALoad}, `${stateName} - Courriel - Les Petites Puces`, reqUrl);
        etat.load();
    }

    $(document).ready(function() {
        displayPageState(stateName, msgId);
        window.onpopstate = function(event) {
            displayPageState(history.state || 'Reception');
        }
    });

    function stopPropagation() {
        event.stopPropagation();
    }

    function loadBrouillon(id) {
        $('.active').removeClass('active');
        displayPageState("Composer", id);
    }

    function loadCourriel(id) {
        $('.active').removeClass('active');
        displayPageState(stateName, id);
    }

    function loadBoiteReception() {
        $('.active').removeClass('active');
        $('#BoiteReception').addClass('active');
        const hState = history.state;
        let addon = '';
        if (hState.id) {
            addon = '/' + hState.id;
        }
        $.ajax({
            url: URLPATH + "/Courriel/Boite/Reception" + addon,
            type: "GET",
            data: {

            },
            success: function(result) {
                $('#PLACEHOLDER').html(result);
            },
            error: function(req, status, err) {
                console.log(req, status, err);
            }
        });
    }
    function loadBrouillons() {
        $('.active').removeClass('active');
        $('#Brouillons').addClass('active');
        $.ajax({
            url: URLPATH + "/Courriel/Boite/Brouillon",
            type: "GET",
            data: {

            },
            success: function(result) {
                $('#PLACEHOLDER').html(result);
            },
            error: function(req, status, err) {
                console.log(req, status, err);
            }
        });
    }
    function loadElementsEnvoyes() {
        $('.active').removeClass('active');
        $('#ElementsEnvoyes').addClass('active');
        const hState = history.state;
        let addon = '';
        if (hState.id) {
            addon = '/' + hState.id;
        }
        $.ajax({
            url: URLPATH + "/Courriel/Boite/Envoye" + addon,
            type: "GET",
            data: {

            },
            success: function(result) {
                $('#PLACEHOLDER').html(result);
            },
            error: function(req, status, err) {
                console.log(req, status, err);
            }
        });
    }
    function loadElementSupprimes() {
        $('.active').removeClass('active');
        $('#ElementSupprimes').addClass('active');
        const hState = history.state;
        let addon = '';
        if (hState.id) {
            addon = '/' + hState.id;
        }
        $.ajax({
            url: URLPATH + "/Courriel/Boite/Supprime" + addon,
            type: "GET",
            data: {

            },
            success: function(result) {
                $('#PLACEHOLDER').html(result);
            },
            error: function(req, status, err) {
                console.log(req, status, err);
            }
        });
    }

    let saveTimeoutId;
    let lastSave;
    function loadComposerMessage() {
        $('.active').removeClass('active');
        const state = history.state;
        const addon = state.id ? '/' + state.id : '';
        $.ajax({
            url: URLPATH + "/Courriel/Boite/Composer" + addon,
            type: "GET",
            data: {},
            success: function(result) {
                $('#PLACEHOLDER').html(result);
                registerAutoSaveEvents();
            },
            error: function(req, status, err) {
                console.log(req, status, err);
            }
        });
    }
    function registerAutoSaveEvents() {
        $('#textarea').on('froalaEditor.contentChanged',handleChange);
        $('#tbObjet').keyup(handleChange);

        $('#textarea').on('froalaEditor.blur',sauvegarderBrouillon);
        $('#destinataire').change(sauvegarderBrouillon);
        $('#tbObjet').change(sauvegarderBrouillon);

        $('#upload').change(attachmentChanged);
    }

    function attachmentChanged() {

        setCanSend(false);
        sauvegarderBrouillon(postAttachment);
    }
    function postAttachment() {
        const formData = new FormData();
        const fileInput = $('#upload')[0];

        for (let i = 0; i < fileInput.files.length; i++) {
            const file = fileInput.files[i];
            formData.append(file.name, file);
        }

        $.ajax({
            url: '/Courriel/Televerser/' + msgId,
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            type: 'POST',
            complete: function() {
                setCanSend(true);
            },
            success: function (data, textStatus, jqXHR) {
                $('#pieceJointeLink').attr('href', '/Courriel/PieceJointe/' + msgId);
                const file = $('#upload')[0].files[0].name;
                $('#fileUploadText').val(file);
            },
            error: function (xhr, ajaxOptions, errMsg) {
                alert('Erreur en téléversant le fichier: ' + errMsg);
            },
        });
    }
    function handleChange() {
        const timeout = 2000;
        if (!saveTimeoutId) {
            saveTimeoutId = window.setTimeout(sauvegarderBrouillon, timeout);
        }
    }
    function sauvegarderBrouillon(callback) {
        const destinataires = lstDestinataires.map(e => e.No);
        console.log(destinataires);
        const msg = {
            DescMsg: $('#textarea').froalaEditor('html.get'),
            objet: $('#tbObjet').val(),
            destinataires: destinataires,
        };
        let method = 'POST';
        if (msgId) {
            method = 'PUT';
            msg.NoMsg = msgId;
        }

        const data = JSON.stringify(msg);
        console.log((method === 'POST' ? 'Nouveau ' : 'Update ') + 'brouillon');
        console.log(msg);
        console.log(data);

        $.ajax({
            url: '/Courriel/Enregistrer',
            method: method,
            data: data,
            dataType: 'json',
            processData: false,
            success: (data) => {
                msgId = data.NoMsg;

                if (callback && callback instanceof Function) {
                    callback();
                }

                if (saveTimeoutId) {
                    window.clearTimeout(saveTimeoutId);
                    saveTimeoutId = null;
                }

                lastSave = new Date();
                $('#lastSave').html('<i class="glyphicon glyphicon-floppy-disk"></i> ' + lastSave.toLocaleTimeString());
            },
            contentType: 'application/json'
        });
    }
    function setCanSend(canSend) {
        //TODO: Block sending, spinner?
    }
</script>
<style>
    .nonLu {
        font-weight: bold;
        background-color: rgba(179, 178, 184, 0.25);
    }
</style>